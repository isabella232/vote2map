# -*- coding: utf-8 -*-
import sys 

import csv

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from nextgis_elections.models import Unit, Protocol, ProtocolVote

conn = sys.argv[1]
engine = create_engine(conn, echo=False)
dbsession = sessionmaker(bind=engine)()

f = csv.reader(sys.stdin, delimiter=',', quotechar='"')
head = f.next()

fieldmap = (
    (1, "Число избирателей, внесенных в список избирателей", 'v_count'),
    (2, "Число избирательных бюллетеней, полученных участковой избирательной комиссией", 'b_count'),
    (3, "Число избирательных бюллетеней, выданных избирателям, проголосовавшим досрочно", 'b_early'),
    (4, "Число избирательных бюллетеней, выданных избирателям в помещении для голосования", 'b_inside'),
    (5, "Число избирательных бюллетеней, выданных избирателям вне помещения для голосования", 'b_outside'),
    (6, "Число погашенных избирательных бюллетеней", 'b_canceled'),
    (7, "Число избирательных бюллетеней в переносных ящиках для голосования", 'b_portable'),
    (8, "Число избирательных бюллетеней в стационарных ящиках для голосования", 'b_fixed'),
    (9, "Число недействительных избирательных бюллетеней", 'b_invalid'),
    (10, "Число действительных избирательных бюллетеней", 'b_valid'),
    (11, "Число открепительных удостоверений, полученных участковой избирательной комиссией", 'a_count'),
    (12, "Число открепительных удостоверений, выданных избирателям на избирательном участке", 'a_issued_l'),
    (13, "Число избирателей, проголосовавших по открепительным удостоверениям на избирательном участке", 'v_abs'),
    (14, "Число погашенных неиспользованных открепительных удостоверений", 'a_canceled'),
    (15, "Число открепительных удостоверений, выданных избирателям территориальной избирательной комиссией", 'a_issued_t'),
    (16, "Число утраченных открепительных удостоверений", 'a_stolen'),
    (17, "Число утраченных избирательных бюллетеней", 'b_stolen'),
    (18, "Число избирательных бюллетеней, не учтенных при получении", 'b_wtf')
)

votemap = (
    (19, "1. Политическая партия СПРАВЕДЛИВАЯ РОССИЯ", 1),
    (20, "2. Политическая партия \"Либерально-демократическая партия России\"", 2),
    (21, "3. Политическая партия \"ПАТРИОТЫ РОССИИ\"", 3),
    (22, "4. Политическая партия \"Коммунистическая партия Российской Федерации\"", 4),
    (23, '5. Политическая партия "Российская объединенная демократическая партия "ЯБЛОКО"', 5),
    (24, '6. Всероссийская политическая партия "ЕДИНАЯ РОССИЯ"', 6),
    (25, '7. Всероссийская политическая партия "ПРАВОЕ ДЕЛО"', 7)
)



for row in f:
    unit = dbsession.query(Unit).filter_by(id_level4=int(row[0])).one()
    #print unit.id_level4
    p = Protocol(source='I', unit_id=unit.id)

    for (idx, name, fld) in fieldmap:
        setattr(p, fld, int('0' if row[idx] == '' else row[idx]))

    dbsession.add(p)
    
    pvsum = 0.0
    pvs = []
    for (idx, name, fld) in votemap:
        pv = ProtocolVote(source='I', unit_id=unit.id, party_id=fld)
        pv.vote_c = int('0' if row[idx] == '' else row[idx])
        pvsum += pv.vote_c
        pvs.append(pv)

    for pv in pvs:
        pv.vote_p = pv.vote_c / pvsum
        dbsession.add(pv)

    if pvsum != p.b_valid:
       print '%d : %d != %d' % (unit.id_level4, pvsum, p.b_valid)

dbsession.flush()
dbsession.commit()
